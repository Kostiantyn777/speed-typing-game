{"version":3,"sources":["hooks/useWordGame.js","App.js","reportWebVitals.js","index.js"],"names":["useWordGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","handleChange","e","value","target","calculateWordCount","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","useEffect","setTimeout","time","App","ref","onChange","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNA6CeA,MA3Cf,WAAyC,IAApBC,EAAmB,uDAAJ,GAAI,EACZC,mBAAS,IADG,mBAC7BC,EAD6B,KACvBC,EADuB,OAEMF,mBAASD,GAFf,mBAE7BI,EAF6B,KAEdC,EAFc,OAGMJ,oBAAS,GAHf,mBAG7BK,EAH6B,KAGdC,EAHc,OAIFN,mBAAS,GAJP,mBAI7BO,EAJ6B,KAIlBC,EAJkB,KAK9BC,EAAaC,iBAAO,MAE1B,SAASC,EAAaC,GAAI,IACfC,EAASD,EAAEE,OAAXD,MACPX,EAAQW,GAGZ,SAASE,EAAmBd,GAExB,OADiBA,EAAKe,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAGhD,SAASC,IACLf,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRO,EAAWa,QAAQC,UAAW,EAC9Bd,EAAWa,QAAQE,QAGvB,SAASC,IACLnB,GAAiB,GACjBE,EAAaO,EAAmBd,IAapC,OAVAyB,qBAAU,WACHrB,GAAiBF,EAAgB,EAChCwB,YAAW,WACPvB,GAAiB,SAAAwB,GAAI,OAAIA,EAAO,OACjC,KACqB,IAAlBzB,GACNsB,MAEL,CAACtB,EAAeE,IAEZ,CAACI,aAAYE,eAAcV,OAAMI,gBAAeF,gBAAekB,YAAWd,cCPtEsB,MAhCf,WAAgB,IAAD,EASP/B,EAAY,GAPZW,EAFO,EAEPA,WACAE,EAHO,EAGPA,aACAV,EAJO,EAIPA,KACAI,EALO,EAKPA,cACAF,EANO,EAMPA,cACAkB,EAPO,EAOPA,UACAd,EARO,EAQPA,UAGJ,OACI,gCACI,uDACA,0BACIuB,IAAKrB,EACLsB,SAAUpB,EACVE,MAAOZ,EACPsB,UAAWlB,IAEf,kDAAqBF,KACrB,wBACI6B,QAASX,EACTE,SAAUlB,EAFd,mBAMA,8CAAiBE,SClBd0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.57616794.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from \"react\"\r\n\r\nfunction useWordGame(startingTime = 10) {\r\n    const [text, setText] = useState(\"\")\r\n    const [timeRemaining, setTimeRemaining] = useState(startingTime)\r\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\r\n    const [wordCount, setWordCount] = useState(0)\r\n    const textBoxRef = useRef(null)\r\n    \r\n    function handleChange(e) {\r\n        const {value} = e.target\r\n        setText(value)\r\n    }\r\n    \r\n    function calculateWordCount(text) {\r\n        const wordsArr = text.trim().split(\" \")\r\n        return wordsArr.filter(word => word !== \"\").length\r\n    }\r\n    \r\n    function startGame() {\r\n        setIsTimeRunning(true)\r\n        setTimeRemaining(startingTime)\r\n        setText(\"\")\r\n        textBoxRef.current.disabled = false\r\n        textBoxRef.current.focus()\r\n    }\r\n    \r\n    function endGame() {\r\n        setIsTimeRunning(false)\r\n        setWordCount(calculateWordCount(text))\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(isTimeRunning && timeRemaining > 0) {\r\n            setTimeout(() => {\r\n                setTimeRemaining(time => time - 1)\r\n            }, 1000)\r\n        } else if(timeRemaining === 0) {\r\n            endGame()\r\n        }\r\n    }, [timeRemaining, isTimeRunning])\r\n    \r\n    return {textBoxRef, handleChange, text, isTimeRunning, timeRemaining, startGame, wordCount}\r\n}\r\n\r\nexport default useWordGame\r\n","import React from \"react\";\nimport useWordGame from \"./hooks/useWordGame\"\n\nfunction App() {\n    const {\n        textBoxRef, \n        handleChange, \n        text, \n        isTimeRunning, \n        timeRemaining, \n        startGame, \n        wordCount\n    } = useWordGame(5)\n    \n    return (\n        <div>\n            <h1>How fast do you type?</h1>\n            <textarea\n                ref={textBoxRef}\n                onChange={handleChange}\n                value={text}\n                disabled={!isTimeRunning}\n            />\n            <h4>Time remaining: {timeRemaining}</h4>\n            <button \n                onClick={startGame}\n                disabled={isTimeRunning}\n            >\n                Start\n            </button>\n            <h1>Word count: {wordCount}</h1>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}